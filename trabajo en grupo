class Contacto:
    """Clase que representa un contacto en la agenda."""
    def __init__(self, nombre, telefono, email):
        self.nombre = nombre
        self.telefono = telefono
        self.email = email
        self.siguiente = None
        self.anterior = None
    
    def __str__(self):
        """Representación en cadena del contacto."""
        return f"Nombre: {self.nombre}, Teléfono: {self.telefono}, Email: {self.email}"


class Agenda:
    """Implementación de agenda utilizando una lista enlazada doble."""
    def __init__(self):
        self.cabeza = None
        self.cola = None
        self.tamaño = 0
    
    def esta_vacia(self):
        """Verifica si la agenda está vacía."""
        return self.cabeza is None
    
    def agregar_contacto(self, nombre, telefono, email):
        """Agrega un nuevo contacto a la agenda."""
        nuevo_contacto = Contacto(nombre, telefono, email)
        
        # Si la agenda está vacía
        if self.esta_vacia():
            self.cabeza = nuevo_contacto
            self.cola = nuevo_contacto
        else:
            # Añadir al final de la lista
            nuevo_contacto.anterior = self.cola
            self.cola.siguiente = nuevo_contacto
            self.cola = nuevo_contacto
        
        self.tamaño += 1
        return nuevo_contacto
    
    def eliminar_contacto(self, nombre):
        """Elimina un contacto por nombre."""
        if self.esta_vacia():
            print("La agenda está vacía.")
            return False
        
        actual = self.cabeza
        
        # Si es el primer elemento
        if actual.nombre == nombre:
            self.cabeza = actual.siguiente
            
            if self.cabeza:
                self.cabeza.anterior = None
            else:
                # Era el único elemento
                self.cola = None
            
            self.tamaño -= 1
            print(f"Contacto '{nombre}' eliminado correctamente.")
            return True
        
        # Buscar en el resto de la lista
        while actual.siguiente:
            if actual.siguiente.nombre == nombre:
                # Encontrado, actualizar enlaces
                contacto_eliminar = actual.siguiente
                actual.siguiente = contacto_eliminar.siguiente
                
                if contacto_eliminar.siguiente:
                    contacto_eliminar.siguiente.anterior = actual
                else:
                    # Era el último elemento
                    self.cola = actual
                
                self.tamaño -= 1
                print(f"Contacto '{nombre}' eliminado correctamente.")
                return True
            
            actual = actual.siguiente
        
        print(f"No se encontró el contacto con nombre '{nombre}'.")
        return False
    
    def buscar_contacto(self, nombre):
        """Busca un contacto por su nombre exacto."""
        if self.esta_vacia():
            print("La agenda está vacía.")
            return None
        
        actual = self.cabeza
        
        while actual:
            if actual.nombre == nombre:
                return actual
            actual = actual.siguiente
        
        print(f"No se encontró el contacto con nombre '{nombre}'.")
        return None
    
    def buscar_parcial(self, termino):
        """Busca contactos que coincidan parcialmente con un término."""
        if self.esta_vacia():
            print("La agenda está vacía.")
            return []
        
        resultados = []
        actual = self.cabeza
        
        termino = termino.lower()
        
        while actual:
            if (termino in actual.nombre.lower() or 
                termino in actual.telefono or 
                termino in actual.email.lower()):
                resultados.append(actual)
            actual = actual.siguiente
        
        return resultados
    
    def ordenar_por_nombre(self):
        """Ordena los contactos por nombre alfabéticamente."""
        if self.esta_vacia() or self.tamaño == 1:
            return  # No hay nada que ordenar
        
        # Convertir a lista para facilitar el ordenamiento
        contactos = []
        actual = self.cabeza
        while actual:
            contactos.append((actual.nombre, actual.telefono, actual.email))
            actual = actual.siguiente
        
        # Ordenar la lista por nombre
        contactos.sort(key=lambda x: x[0])
        
        # Reconstruir la lista enlazada
        self.cabeza = None
        self.cola = None
        self.tamaño = 0
        
        for nombre, telefono, email in contactos:
            self.agregar_contacto(nombre, telefono, email)
        
        print("Contactos ordenados alfabéticamente por nombre.")
    
    def listar_contactos(self):
        """Lista todos los contactos de la agenda."""
        if self.esta_vacia():
            print("La agenda está vacía.")
            return
        
        print("\n===== LISTA DE CONTACTOS =====")
        actual = self.cabeza
        contador = 1
        
        while actual:
            print(f"{contador}. {actual}")
            actual = actual.siguiente
            contador += 1
        
        print(f"\nTotal de contactos: {self.tamaño}")
    
    def obtener_tamaño(self):
        """Retorna la cantidad de contactos en la agenda."""
        return self.tamaño


def mostrar_menu():
    """Muestra el menú de opciones de la agenda."""
    print("\n===== AGENDA DE CONTACTOS =====")
    print("1. Agregar contacto")
    print("2. Eliminar contacto")
    print("3. Buscar contacto por nombre exacto")
    print("4. Buscar contacto (coincidencia parcial)")
    print("5. Ordenar contactos por nombre")
    print("6. Listar todos los contactos")
    print("0. Salir")
    print("===============================")


def main():
    """Función principal que ejecuta la aplicación de agenda."""
    agenda = Agenda()
    
    # Agregar algunos contactos de ejemplo
    agenda.agregar_contacto("Juan Pérez", "555-1234", "juan@example.com")
    agenda.agregar_contacto("Ana García", "555-5678", "ana@example.com")
    agenda.agregar_contacto("Carlos López", "555-9012", "carlos@example.com")
    
    while True:
        mostrar_menu()
        opcion = input("Seleccione una opción: ")
        
        if opcion == "1":
            nombre = input("Ingrese el nombre: ")
            telefono = input("Ingrese el teléfono: ")
            email = input("Ingrese el email: ")
            
            # Validar que no esté vacío
            if not nombre or not telefono or not email:
                print("Error: Todos los campos son obligatorios.")
                continue
            
            # Validar si ya existe
            if agenda.buscar_contacto(nombre):
                print(f"Error: Ya existe un contacto con el nombre '{nombre}'.")
                continue
            
            agenda.agregar_contacto(nombre, telefono, email)
            print(f"Contacto '{nombre}' agregado correctamente.")
            
        elif opcion == "2":
            nombre = input("Ingrese el nombre del contacto a eliminar: ")
            agenda.eliminar_contacto(nombre)
            
        elif opcion == "3":
            nombre = input("Ingrese el nombre del contacto a buscar: ")
            contacto = agenda.buscar_contacto(nombre)
            if contacto:
                print("\n===== CONTACTO ENCONTRADO =====")
                print(contacto)
            
        elif opcion == "4":
            termino = input("Ingrese el término de búsqueda: ")
            resultados = agenda.buscar_parcial(termino)
            
            if not resultados:
                print(f"No se encontraron contactos que coincidan con '{termino}'.")
            else:
                print(f"\n===== {len(resultados)} CONTACTOS ENCONTRADOS =====")
                for i, contacto in enumerate(resultados, 1):
                    print(f"{i}. {contacto}")
            
        elif opcion == "5":
            agenda.ordenar_por_nombre()
            
        elif opcion == "6":
            agenda.listar_contactos()
            
        elif opcion == "0":
            print("¡Gracias por usar la Agenda de Contactos!")
            break
            
        else:
            print("Opción no válida. Intente nuevamente.")


if __name__ == "__main__":
    main()
